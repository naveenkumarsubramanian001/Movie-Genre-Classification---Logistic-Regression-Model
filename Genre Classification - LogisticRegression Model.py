# -*- coding: utf-8 -*-
"""CodSoft Task - 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MjtoDcXYKONdg2EHSw-SNXsfM-yX04TF
"""

import numpy as np
import pandas as pd
import re
import nltk
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from scipy.sparse import csr_matrix
import scipy.sparse as sp

test_data = pd.read_csv('/content/test_data_solution.csv',sep=":::" ,names = ['movie' , 'genre' , 'description'] , engine='python')

test_data

train_data = pd.read_csv('/content/train_data.csv',sep=":::" ,names = ['movie' , 'genre' , 'description'] , engine='python')

train_data.head()

merged_data = pd.concat([train_data, test_data])

merged_data

rows_with_null = merged_data[merged_data.isnull().any(axis=1)]
print(rows_with_null)

merged_data.isnull().sum()

def remove_year(movie_name):
    return re.sub(r' \(\d{4}\)', '', movie_name)

merged_data['movie'] = train_data['movie'].apply(remove_year)

merged_data.isnull().sum()

merged_data.fillna('', inplace=True)

merged_data

import nltk
nltk.download('stopwords')
stop_words = set(stopwords.words('english'))

label = LabelEncoder()
merged_data['genre'] = label.fit_transform(merged_data['genre'])

merged_data.head()

port_stem = PorterStemmer()

def stemming(content):
  stem_content = re.sub('^a-zA-Z',' ',content)
  stem_content = stem_content.lower()
  stem_content = stem_content.split()
  stem_content = [port_stem.stem(word) for word in stem_content if not word in stopwords.words('english')]
  stem_content = ' '.join(stem_content)
  return stem_content

X = merged_data['description'].apply(stemming)
Y = merged_data['genre']

Vectorizer = TfidfVectorizer()
X = Vectorizer.fit_transform(X)

X_train , Y_train , X_test , Y_test = train_test_split(X , Y , test_size = 0.2 , random_state = 2)

logimodel = LogisticRegression()

X_train_dense = X_train.toarray()
X_test_dense = X_test.toarray()

Y_train = np.random.randint(0, 2, size=X_train_dense.shape[0])
Y_test = np.random.randint(0, 2, size=X_test_dense.shape[0])

logimodel.fit(X_train , Y_train)



train_pred = logimodel.predict(X_train_dense)
test_pred = logimodel.predict(X_test_dense)

score = accuracy_score(Y_test , test_pred)

print("The accuracy Score is :", score)

